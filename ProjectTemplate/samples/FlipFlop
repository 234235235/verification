int x; //input
int y; //output

int r1; //register 1
int r2; //register 2

//int dr1;
//int dr2;
//int dx;

//int changer = 5;  //for simulating changin input to the flipflop

//property p = (A F (x==0 && y==0 && (!A X y == 1))) && (A F (x==0 && y==1 && (!A X y == 0)));
//property p = true;
//property p = E G (E F (x== 0 && y==0 && A X y==0) && E F (x==0 && y==1 && A X y==1));
//property p=  ! E F (x==0  && y==0 && E X (x==1 &&  E X (y==0) ) ||  (x==0  && y==1 && E X (x==1 &&  E X (y==1) ))   ) ;
//property p=(! E F (x==0  && y==0 && E X (x==1 &&  E X (y==0) ) )) &&  (! E F (x==0  && y==1 && E X (x==1 &&  E X (y==1) ) ) ) ;

property p=(! E F (x==0  && y==0 && E X (y==1) )) &&  (! E F (x==0  && y==1 && E X (y==0) ));







//do{
//::tau{= dr1=r1, dr2=r2, dx=x, x=1, r1=dx, r2=(((1-dr1)*dx)-dr2)*(((1-dr1)*dx)-dr2), y=r2, dr1=0, dr2=0, dx=0 =}
//::tau{= dr1=r1, dr2=r2, dx=x, x=0, r1=dx, r2=(((1-dr1)*dx)-dr2)*(((1-dr1)*dx)-dr2), y=r2, dr1=0, dr2=0, dx=0 =}
//}

do{
::tau{=r2=(((1-r1)*x)-r2)*(((1-r1)*x)-r2), r1=x, x=1, y=r2 =}
::tau{= r2=(((1-r1)*x)-r2)*(((1-r1)*x)-r2), r1=x, x=0, y=r2 =}
}
